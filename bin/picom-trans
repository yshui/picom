#!/bin/sh

#
# picom-trans
# Copyright (c) 2021, Subhaditya Nath
# Based on previous works of Christopher Jeffrey
#

# Usage:
#  $ picom-trans [options] [+|-]opacity
# By window id
#   $ picom-trans -w "$WINDOWID" 75
# By name
#   $ picom-trans -n "urxvt" 75
# By current window
#   $ picom-trans -c 75
# By selection
#   $ picom-trans 75
#   $ picom-trans -s 75
# Increment current window 5%
#   $ picom-trans -c +5
# Delete current window's opacity
#   $ picom-trans -c --delete
# Toggle current window's opacity between 90 and unset
#   $ picom-trans -c --toggle 90
# Reset all windows
#   $ picom-trans --reset


# Save $0 now to print correct value while printing from functions.
# Printing errormsgs from functions using "$0" prints the function name
# instead of the executable name.
EXE_NAME="$0"

function print_usage
{ #{
  echo "Usage: $EXE_NAME [options] [+|-]opacity"
  echo ""
  echo "Options:"
  echo "  -h, --help                Print this help message."
  echo "  -o, --opacity OPACITY     Specify the new opacity value in range 0-100 for the window. If"
  echo "                            prefixed with + or -, increment or decrement from the current"
  echo "                            opacity of the target window."
  echo ""
  echo "Actions:"
  echo "  -g, --get                 Print current opacity of the target window."
  echo "  -d, --delete              Delete opacity of the target window."
  echo "  -t, --toggle              Toggle the target window's opacity, i.e. set if not already set"
  echo "                            and delete else."
  echo "  -r, --reset               Reset opacity for all windows."
  echo ""
  echo "Window Selection:"
  echo "  -s, --select              Select target window with mouse cursor. (DEFAULT)"
  echo "  -c, --current             Select the currently active window as target."
  echo "  -n, --name WINDOW_NAME    Specify and try to match a window name."
  echo "  -w, --window WINDOW_ID    Specify the window id of the target window."
} #}


function parse_args
{ #{

  # Iterate over every option and convert
  # longopts (GNU) into POSIX-compatible opts
  i=1       # because we start from "$1", not from "$0"
  while [ $i -le $# ]
  do
    # Catch invalid options
    case "$1" in
      (--opacity=|--name=|--window=)
        echo "Option $1 needs a value." >&2
        exit 1
    esac

    # Separate  "--ARG=VAL"  into  "--ARG" "VAL"
    case "$1" in
      (--opacity=*|--name=*|--window=*)
        ARG="$(echo "$1" | sed -E 's/(--[^=]+)=.*$/\1/')"
        VAL="${1##${ARG}=}"
        shift && set -- "$ARG" "$VAL" "$@"
    esac

    # Turn into short form
    case "$1" in
      (--help|--opacity|--get|--delete|--toggle|--reset|--select|--current|--name|--window)
        ARG=${1#-}                      # remove one '-' from prefix
        ARG="$(echo $ARG | cut -c -2)"  # get first two characters
        shift && set -- "$ARG" "$@"
    esac

    # If the argument still starts with --, it is an invalid argument
    case "$1" in
      (--*)
        echo "$EXE_NAME: illegal option $1" >&2
        exit 1
    esac

    # Prepare for next iteration
    ARG="$1"
    shift && set -- "$@" "$ARG"
    i=$(( i + 1 ))
  done


  while test $# -gt 0; do
    # 15 +15 -15 are opacity values
    # filter them out here, otherwise getopts will complain
    if echo "$1" | grep -qE '^[+-]?[[:digit:]]+%?$'; then
      target_opacity=$1
      shift
      continue
    fi

    OPTIND=1
    while getopts 'ho:gdtrscn:w:00:11:22:33:44:55:66:77:88:99:' OPTION "$@"
    # Originally, the above command was -
    #   while getopts 'ho:gdtrscn:w:' OPTION "$@"
    # But the numbers were added to account for opacity values (see below)
    #
    # Why is each number repeated twice?
    # Because once it is specified with a ':' suffix, and once without.
    # For e.g. the string '11:' accounts for two cases -
    # 1) The '1:' accounts for -
    #       picom-trans -c -10
    #       picom-trans -c -15
    # 2) The '1' accounts for -
    #       picom-trans -c -1
    do
      case "$OPTION" in
        (h) print_usage; exit 0;;
        (o) target_opacity="$OPTARG";;
        (g) action=get;;
        (d) action=delete;;
        (t) action=toggle;;
        (r) action=reset;;
        (s) winidtype=;         winid=;;
        (c) winidtype=-id;      winid="$(get_focused_window_id)";;
        (n) winidtype=-name;    winid="$OPTARG";;
        (w) winidtype=-id;      winid="$OPTARG";;
        (0|1|2|3|4|5|6|7|8|9)
          # It's an opacity value. Ignore it.
          # It shall be handled by the filter above.
          #
          # Why did this happen, you ask?
          # Well, it probably happened because getopts strayed into $2
          # for e.g. -
          #     picom-trans -c -15
          #
          # Let's check if that's actually what happened -
          if test $OPTIND -ge 3
          then break
          else echo "$EXE_NAME: illegal option: $1" >&2
          fi
          ;;
        (\?) exit 1;;
      esac

      # If getopts goes to the second argument, stop
      test $OPTIND -ge 3 && break
    done
    shift
  done
} #}


# NOTE: The code inside the following function has been taken directly from the
# old version of picom-trans.  Tread cautiously!
function get_target_window_id
{ #{

  # Get ID of the target window
  if test -z "$winidtype"; then
    treeout=$(xwininfo -children -frame)
  else
    test "$winidtype" = '-id' \
      && ! echo "$winid" | grep -Eiq '^[[:space:]]*(0x[[:xdigit:]]+|[[:digit:]]+)[[:space:]]*$' \
      && echo 'Bad window ID.' && exit 1
    treeout=$(xwininfo -children $winidtype "$winid")
  fi

  wid=$(echo "$treeout" | sed -n 's/^xwininfo:.*: \(0x[[:xdigit:]]*\).*$/\1/p')

  if test -z "$wid"; then
    echo 'Failed to find window.'
    exit 1
  fi

  # Make sure it's not root window
  if echo "$treeout" | fgrep -q 'Parent window id: 0x0'; then
    echo 'Cannot set opacity on root window.'
    exit 1
  fi

  # If it's already the topmost window
  if echo "$treeout" | grep -q 'Parent window id: 0x[[:xdigit:]]* (the root window)'; then
    topmost=$wid
  else
    # Get the whole window tree
    treeout=$(xwininfo -root -tree)

    if test -z "$treeout"; then
      echo 'Failed to get root window tree.'
      exit 1
    fi

    # Find the line number of the target window in the window tree
    lineno=$(echo -n "$treeout" | grep -nw "^\s*$wid" | head -n1 | cut -d ':' -f 1)

    if test -z "$lineno"; then
      echo 'Failed to find window in window tree.'
      exit 1
    fi

    # Find the highest ancestor of the target window below
    topmost=$(echo -n "$treeout" \
      | head -n $lineno \
      | sed -n 's/^     \(0x[[:xdigit:]]*\).*/\1/p' \
      | tail -n 1)
  fi

  if test -z "$topmost"; then
    echo 'Failed to find the highest parent window below root of the' \
      'selected window.'
    exit 1
  fi

  echo "$topmost"
} #}

function get_focused_window_id
{ #{
  echo "$(xprop -root -notype _NET_ACTIVE_WINDOW \
    | grep -Eo '0x[[:xdigit:]]+' \
    | head -n 1)"
} #}

function get_current_opacity
{ #{
  cur="$(xprop -id "$winid" -notype _NET_WM_WINDOW_OPACITY \
    | sed -E 's/^_NET_WM_WINDOW_OPACITY = ([0-9]*)$|^.*$/\1/')"

  # Unset opacity means fully opaque
  test -z "$cur" && cur=0xffffffff
  cur=$((cur * 100 / 0xffffffff))

  echo "$cur"
} #}



function get_opacity
{ #{
  echo "$(get_current_opacity)"
  exit 0
} #}

function delete_opacity
{ #{
  xprop -id "$winid" -remove _NET_WM_WINDOW_OPACITY
  exit 0
} #}

function reset_opacity  # Reset opacity of all windows
{ #{
    xwininfo -root -tree \
    | sed -n 's/^     \(0x[[:xdigit:]]*\).*/\1/p' \
    | while IFS=$(printf '\n') read wid;
      do
        xprop -id "$wid" -remove _NET_WM_WINDOW_OPACITY
      done
    exit 0
} #}

function set_opacity
{ #{
  if ! echo "$target_opacity" | grep -qE '^[+-]?[[:digit:]]+%?$'
  then
    if test -z "$target_opacity"
    then echo "No opacity specified" >&2
    else echo "Invalid opacity specified: $target_opacity" >&2
    fi
    exit 1
  fi

  # strip trailing '%' sign, if any
  target_opacity="${target_opacity%%%}"

  current_opacity=$(get_current_opacity)
  echo "$target_opacity" | grep -qE '^[+-]' \
    && target_opacity=$(( current_opacity + target_opacity ))

  test $target_opacity -lt 0   && target_opacity=0
  test $target_opacity -gt 100 && target_opacity=100

  target_opacity=$((target_opacity * 0xffffffff / 100))
  xprop -id "$winid" -f _NET_WM_WINDOW_OPACITY 32c \
      -set _NET_WM_WINDOW_OPACITY "$target_opacity"

  exit $?
} #}

function toggle_opacity
{ #{
  current_opacity="$(xprop -id "$winid" -notype _NET_WM_WINDOW_OPACITY \
    | sed -E 's/^_NET_WM_WINDOW_OPACITY = ([0-9]*)$|^.*$/\1/')"

  if test -z "$current_opacity"
  then
    test -z "$target_opacity" && target_opacity=100
    set_opacity
  else
    delete_opacity
  fi
} #}


# Warn about rename of compton to picom
case "$0" in
  *compton-trans*)  echo "Warning: compton has been renamed, please use picom-trans instead" >&2;;
esac


# "command" is a shell built-in, faster than "which"
if test -z "$(command -v xprop)" -o -z "$(command -v xwininfo)"; then
  echo 'The command xwininfo or xprop is not available. They might reside in a package named xwininfo, xprop, x11-utils, xorg-xprop, or xorg-xwininfo.' >&2
  exit 1
fi


# No arguments given. Show help.
if test $# -eq 0; then
  print_usage >&2
  exit 1
fi


# Variables
#   action is set to 'set' by default
action=set
winid=
winidtype=
target_opacity=

# If there's only one argument, and it's a valid opacity
# then take it as target_opacity.  Else, parse all arguments.
if test $# -eq 1 && echo "$1" | grep -qE '^[+-]?[[:digit:]]+%?$'
then
  target_opacity=$1
  shift
else
  parse_args "$@"
fi


# reset_opacity doesn't need $winid
case $action in
  (reset)   reset_opacity;;
esac

# Any other action needs $winid
# NOTE: Do NOT change the order of winid= and winidtype= below
#       the output of get_target_window_id depends on $winidtype
winid=$(get_target_window_id)
winidtype=-id
case $action in
  (set)     set_opacity;;
  (get)     get_opacity;;
  (delete)  delete_opacity;;
  (toggle)  toggle_opacity;;
esac


# We should never reach this part of the file
echo "This sentence shouldn't have been printed. Please file a bug report." >&2
exit 128

# vim:ft=sh:ts=4:sts=4:sw=2:et:fdm=marker:fmr=#{,#}:nowrap
